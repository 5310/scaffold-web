if (location.protocol === 'http:') location.protocol = 'https:';
if ('serviceWorker' in navigator) {
  navigator.serviceWorker.register('sw.js').then(reg => console.log('Service Worker registered', reg)).catch(err => console.error('Service Worker **not** registered', err));
} else {
  console.warn('Service Worker not supported in this browser');
}

var pureE = function (a) {
  return function () {
    return a;
  };
};

var bindE = function (a) {
  return function (f) {
    return function () {
      return f(a())();
    };
  };
};

var runPure = function (f) {
  return f();
};

var untilE = function (f) {
  return function () {
    while (!f());
    return {};
  };
};

var whileE = function (f) {
  return function (a) {
    return function () {
      while (f()) {
        a();
      }
      return {};
    };
  };
};

var forE = function (lo) {
  return function (hi) {
    return function (f) {
      return function () {
        for (var i = lo; i < hi; i++) {
          f(i)();
        }
      };
    };
  };
};

var foreachE = function (as) {
  return function (f) {
    return function () {
      for (var i = 0, l = as.length; i < l; i++) {
        f(as[i])();
      }
    };
  };
};

var foreign = {
  pureE: pureE,
  bindE: bindE,
  runPure: runPure,
  untilE: untilE,
  whileE: whileE,
  forE: forE,
  foreachE: foreachE
};

var arrayApply = function (fs) {
  return function (xs) {
    var result = [];
    var n = 0;
    for (var i = 0, l = fs.length; i < l; i++) {
      for (var j = 0, k = xs.length; j < k; j++) {
        result[n++] = fs[i](xs[j]);
      }
    }
    return result;
  };
};

var foreign$2 = {
  arrayApply: arrayApply
};

// Generated by purs version 0.11.6
var Semigroupoid = function (compose) {
    this.compose = compose;
};
var semigroupoidFn = new Semigroupoid(function (f) {
    return function (g) {
        return function (x) {
            return f(g(x));
        };
    };
});
var compose = function (dict) {
    return dict.compose;
};
var composeFlipped = function (dictSemigroupoid) {
    return function (f) {
        return function (g) {
            return compose(dictSemigroupoid)(g)(f);
        };
    };
};
var Control_Semigroupoid = {
    Semigroupoid: Semigroupoid,
    compose: compose,
    composeFlipped: composeFlipped,
    semigroupoidFn: semigroupoidFn
};

var Category = function (Semigroupoid0, id) {
    this.Semigroupoid0 = Semigroupoid0;
    this.id = id;
};
var id = function (dict) {
    return dict.id;
};
var categoryFn = new Category(function () {
    return Control_Semigroupoid.semigroupoidFn;
}, function (x) {
    return x;
});
var Control_Category = {
    Category: Category,
    id: id,
    categoryFn: categoryFn
};

var on = function (f) {
    return function (g) {
        return function (x) {
            return function (y) {
                return f(g(x))(g(y));
            };
        };
    };
};
var flip = function (f) {
    return function (b) {
        return function (a) {
            return f(a)(b);
        };
    };
};
var $$const = function (a) {
    return function (v) {
        return a;
    };
};
var applyFlipped = function (x) {
    return function (f) {
        return f(x);
    };
};
var apply$1 = function (f) {
    return function (x) {
        return f(x);
    };
};
var Data_Function = {
    apply: apply$1,
    applyFlipped: applyFlipped,
    "const": $$const,
    flip: flip,
    on: on
};

var arrayMap = function (f) {
  return function (arr) {
    var l = arr.length;
    var result = new Array(l);
    for (var i = 0; i < l; i++) {
      result[i] = f(arr[i]);
    }
    return result;
  };
};

var foreign$4 = {
  arrayMap: arrayMap
};

var unit = {};

var foreign$6 = {
	unit: unit
};

var showIntImpl = function (n) {
  return n.toString();
};

var showNumberImpl = function (n) {
  var str = n.toString();
  return isNaN(str + ".0") ? str : str + ".0";
};

var showCharImpl = function (c) {
  var code = c.charCodeAt(0);
  if (code < 0x20 || code === 0x7F) {
    switch (c) {
      case "\x07":
        return "'\\a'";
      case "\b":
        return "'\\b'";
      case "\f":
        return "'\\f'";
      case "\n":
        return "'\\n'";
      case "\r":
        return "'\\r'";
      case "\t":
        return "'\\t'";
      case "\v":
        return "'\\v'";
    }
    return "'\\" + code.toString(10) + "'";
  }
  return c === "'" || c === "\\" ? "'\\" + c + "'" : "'" + c + "'";
};

var showStringImpl = function (s) {
  var l = s.length;
  return "\"" + s.replace(/[\0-\x1F\x7F"\\]/g, // eslint-disable-line no-control-regex
  function (c, i) {
    switch (c) {
      case "\"":
      case "\\":
        return "\\" + c;
      case "\x07":
        return "\\a";
      case "\b":
        return "\\b";
      case "\f":
        return "\\f";
      case "\n":
        return "\\n";
      case "\r":
        return "\\r";
      case "\t":
        return "\\t";
      case "\v":
        return "\\v";
    }
    var k = i + 1;
    var empty = k < l && s[k] >= "0" && s[k] <= "9" ? "\\&" : "";
    return "\\" + c.charCodeAt(0).toString(10) + empty;
  }) + "\"";
};

var showArrayImpl = function (f) {
  return function (xs) {
    var ss = [];
    for (var i = 0, l = xs.length; i < l; i++) {
      ss[i] = f(xs[i]);
    }
    return "[" + ss.join(",") + "]";
  };
};

var foreign$8 = {
  showIntImpl: showIntImpl,
  showNumberImpl: showNumberImpl,
  showCharImpl: showCharImpl,
  showStringImpl: showStringImpl,
  showArrayImpl: showArrayImpl
};

var Show = function (show) {
    this.show = show;
};
var showString = new Show(foreign$8.showStringImpl);
var showNumber = new Show(foreign$8.showNumberImpl);
var showInt = new Show(foreign$8.showIntImpl);
var showChar = new Show(foreign$8.showCharImpl);
var showBoolean = new Show(function (v) {
    if (v) {
        return "true";
    }
    if (!v) {
        return "false";
    }
    throw new Error("Failed pattern match at Data.Show line 12, column 1 - line 12, column 37: " + [v.constructor.name]);
});
var show = function (dict) {
    return dict.show;
};
var showArray = function (dictShow) {
    return new Show(foreign$8.showArrayImpl(show(dictShow)));
};
var Data_Show = {
    Show: Show,
    show: show,
    showBoolean: showBoolean,
    showInt: showInt,
    showNumber: showNumber,
    showChar: showChar,
    showString: showString,
    showArray: showArray
};

var showUnit = new Data_Show.Show(function (v) {
    return "unit";
});
var Data_Unit = {
    showUnit: showUnit,
    unit: foreign$6.unit
};

var Functor = function (map) {
    this.map = map;
};
var map = function (dict) {
    return dict.map;
};
var mapFlipped = function (dictFunctor) {
    return function (fa) {
        return function (f) {
            return map(dictFunctor)(f)(fa);
        };
    };
};
var $$void = function (dictFunctor) {
    return map(dictFunctor)(Data_Function["const"](Data_Unit.unit));
};
var voidLeft = function (dictFunctor) {
    return function (f) {
        return function (x) {
            return map(dictFunctor)(Data_Function["const"](x))(f);
        };
    };
};
var voidRight = function (dictFunctor) {
    return function (x) {
        return map(dictFunctor)(Data_Function["const"](x));
    };
};
var functorFn = new Functor(Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn));
var functorArray = new Functor(foreign$4.arrayMap);
var flap = function (dictFunctor) {
    return function (ff) {
        return function (x) {
            return map(dictFunctor)(function (f) {
                return f(x);
            })(ff);
        };
    };
};
var Data_Functor = {
    Functor: Functor,
    flap: flap,
    map: map,
    mapFlipped: mapFlipped,
    "void": $$void,
    voidLeft: voidLeft,
    voidRight: voidRight,
    functorFn: functorFn,
    functorArray: functorArray
};

var Apply = function (Functor0, apply) {
    this.Functor0 = Functor0;
    this.apply = apply;
};
var applyFn = new Apply(function () {
    return Data_Functor.functorFn;
}, function (f) {
    return function (g) {
        return function (x) {
            return f(x)(g(x));
        };
    };
});
var applyArray = new Apply(function () {
    return Data_Functor.functorArray;
}, foreign$2.arrayApply);
var apply = function (dict) {
    return dict.apply;
};
var applyFirst = function (dictApply) {
    return function (a) {
        return function (b) {
            return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Data_Function["const"])(a))(b);
        };
    };
};
var applySecond = function (dictApply) {
    return function (a) {
        return function (b) {
            return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Data_Function["const"](Control_Category.id(Control_Category.categoryFn)))(a))(b);
        };
    };
};
var lift2 = function (dictApply) {
    return function (f) {
        return function (a) {
            return function (b) {
                return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(f)(a))(b);
            };
        };
    };
};
var lift3 = function (dictApply) {
    return function (f) {
        return function (a) {
            return function (b) {
                return function (c) {
                    return apply(dictApply)(apply(dictApply)(Data_Functor.map(dictApply.Functor0())(f)(a))(b))(c);
                };
            };
        };
    };
};
var lift4 = function (dictApply) {
    return function (f) {
        return function (a) {
            return function (b) {
                return function (c) {
                    return function (d) {
                        return apply(dictApply)(apply(dictApply)(apply(dictApply)(Data_Functor.map(dictApply.Functor0())(f)(a))(b))(c))(d);
                    };
                };
            };
        };
    };
};
var lift5 = function (dictApply) {
    return function (f) {
        return function (a) {
            return function (b) {
                return function (c) {
                    return function (d) {
                        return function (e) {
                            return apply(dictApply)(apply(dictApply)(apply(dictApply)(apply(dictApply)(Data_Functor.map(dictApply.Functor0())(f)(a))(b))(c))(d))(e);
                        };
                    };
                };
            };
        };
    };
};
var Control_Apply = {
    Apply: Apply,
    apply: apply,
    applyFirst: applyFirst,
    applySecond: applySecond,
    lift2: lift2,
    lift3: lift3,
    lift4: lift4,
    lift5: lift5,
    applyFn: applyFn,
    applyArray: applyArray
};

var Applicative = function (Apply0, pure) {
    this.Apply0 = Apply0;
    this.pure = pure;
};
var pure = function (dict) {
    return dict.pure;
};
var unless = function (dictApplicative) {
    return function (v) {
        return function (v1) {
            if (!v) {
                return v1;
            }
            if (v) {
                return pure(dictApplicative)(Data_Unit.unit);
            }
            throw new Error("Failed pattern match at Control.Applicative line 62, column 1 - line 62, column 65: " + [v.constructor.name, v1.constructor.name]);
        };
    };
};
var when = function (dictApplicative) {
    return function (v) {
        return function (v1) {
            if (v) {
                return v1;
            }
            if (!v) {
                return pure(dictApplicative)(Data_Unit.unit);
            }
            throw new Error("Failed pattern match at Control.Applicative line 57, column 1 - line 57, column 63: " + [v.constructor.name, v1.constructor.name]);
        };
    };
};
var liftA1 = function (dictApplicative) {
    return function (f) {
        return function (a) {
            return Control_Apply.apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
        };
    };
};
var applicativeFn = new Applicative(function () {
    return Control_Apply.applyFn;
}, function (x) {
    return function (v) {
        return x;
    };
});
var applicativeArray = new Applicative(function () {
    return Control_Apply.applyArray;
}, function (x) {
    return [x];
});
var Control_Applicative = {
    Applicative: Applicative,
    liftA1: liftA1,
    pure: pure,
    unless: unless,
    when: when,
    applicativeFn: applicativeFn,
    applicativeArray: applicativeArray
};

var arrayBind = function (arr) {
  return function (f) {
    var result = [];
    for (var i = 0, l = arr.length; i < l; i++) {
      Array.prototype.push.apply(result, f(arr[i]));
    }
    return result;
  };
};

var foreign$10 = {
  arrayBind: arrayBind
};

var Bind = function (Apply0, bind) {
    this.Apply0 = Apply0;
    this.bind = bind;
};
var Discard = function (discard) {
    this.discard = discard;
};
var discard = function (dict) {
    return dict.discard;
};
var bindFn = new Bind(function () {
    return Control_Apply.applyFn;
}, function (m) {
    return function (f) {
        return function (x) {
            return f(m(x))(x);
        };
    };
});
var bindArray = new Bind(function () {
    return Control_Apply.applyArray;
}, foreign$10.arrayBind);
var bind = function (dict) {
    return dict.bind;
};
var bindFlipped = function (dictBind) {
    return Data_Function.flip(bind(dictBind));
};
var composeKleisliFlipped = function (dictBind) {
    return function (f) {
        return function (g) {
            return function (a) {
                return bindFlipped(dictBind)(f)(g(a));
            };
        };
    };
};
var composeKleisli = function (dictBind) {
    return function (f) {
        return function (g) {
            return function (a) {
                return bind(dictBind)(f(a))(g);
            };
        };
    };
};
var discardUnit = new Discard(function (dictBind) {
    return bind(dictBind);
});
var ifM = function (dictBind) {
    return function (cond) {
        return function (t) {
            return function (f) {
                return bind(dictBind)(cond)(function (cond$prime) {
                    if (cond$prime) {
                        return t;
                    }
                    return f;
                });
            };
        };
    };
};
var join = function (dictBind) {
    return function (m) {
        return bind(dictBind)(m)(Control_Category.id(Control_Category.categoryFn));
    };
};
var Control_Bind = {
    Bind: Bind,
    Discard: Discard,
    bind: bind,
    bindFlipped: bindFlipped,
    composeKleisli: composeKleisli,
    composeKleisliFlipped: composeKleisliFlipped,
    discard: discard,
    ifM: ifM,
    join: join,
    bindFn: bindFn,
    bindArray: bindArray,
    discardUnit: discardUnit
};

var Monad = function (Applicative0, Bind1) {
    this.Applicative0 = Applicative0;
    this.Bind1 = Bind1;
};
var whenM = function (dictMonad) {
    return function (mb) {
        return function (m) {
            return Control_Bind.bind(dictMonad.Bind1())(mb)(function (v) {
                return Control_Applicative.when(dictMonad.Applicative0())(v)(m);
            });
        };
    };
};
var unlessM = function (dictMonad) {
    return function (mb) {
        return function (m) {
            return Control_Bind.bind(dictMonad.Bind1())(mb)(function (v) {
                return Control_Applicative.unless(dictMonad.Applicative0())(v)(m);
            });
        };
    };
};
var monadFn = new Monad(function () {
    return Control_Applicative.applicativeFn;
}, function () {
    return Control_Bind.bindFn;
});
var monadArray = new Monad(function () {
    return Control_Applicative.applicativeArray;
}, function () {
    return Control_Bind.bindArray;
});
var liftM1 = function (dictMonad) {
    return function (f) {
        return function (a) {
            return Control_Bind.bind(dictMonad.Bind1())(a)(function (v) {
                return Control_Applicative.pure(dictMonad.Applicative0())(f(v));
            });
        };
    };
};
var ap = function (dictMonad) {
    return function (f) {
        return function (a) {
            return Control_Bind.bind(dictMonad.Bind1())(f)(function (v) {
                return Control_Bind.bind(dictMonad.Bind1())(a)(function (v1) {
                    return Control_Applicative.pure(dictMonad.Applicative0())(v(v1));
                });
            });
        };
    };
};
var Control_Monad = {
    Monad: Monad,
    ap: ap,
    liftM1: liftM1,
    unlessM: unlessM,
    whenM: whenM,
    monadFn: monadFn,
    monadArray: monadArray
};

var monadEff = new Control_Monad.Monad(function () {
    return applicativeEff;
}, function () {
    return bindEff;
});
var bindEff = new Control_Bind.Bind(function () {
    return applyEff;
}, foreign.bindE);
var applyEff = new Control_Apply.Apply(function () {
    return functorEff;
}, Control_Monad.ap(monadEff));
var applicativeEff = new Control_Applicative.Applicative(function () {
    return applyEff;
}, foreign.pureE);
var functorEff = new Data_Functor.Functor(Control_Applicative.liftA1(applicativeEff));

var log = function (s) {
  return function () {
    console.log(s);
    return {};
  };
};

var warn = function (s) {
  return function () {
    console.warn(s);
    return {};
  };
};

var error = function (s) {
  return function () {
    console.error(s);
    return {};
  };
};

var info = function (s) {
  return function () {
    console.info(s);
    return {};
  };
};

var foreign$12 = {
  log: log,
  warn: warn,
  error: error,
  info: info
};

var warnShow = function (dictShow) {
    return function (a) {
        return foreign$12.warn(Data_Show.show(dictShow)(a));
    };
};
var logShow = function (dictShow) {
    return function (a) {
        return foreign$12.log(Data_Show.show(dictShow)(a));
    };
};
var infoShow = function (dictShow) {
    return function (a) {
        return foreign$12.info(Data_Show.show(dictShow)(a));
    };
};
var errorShow = function (dictShow) {
    return function (a) {
        return foreign$12.error(Data_Show.show(dictShow)(a));
    };
};
var Control_Monad_Eff_Console = {
    errorShow: errorShow,
    infoShow: infoShow,
    logShow: logShow,
    warnShow: warnShow,
    error: foreign$12.error,
    info: foreign$12.info,
    log: foreign$12.log,
    warn: foreign$12.warn
};

// Generated by purs version 0.11.6

var refEq = function (r1) {
  return function (r2) {
    return r1 === r2;
  };
};

var refIneq = function (r1) {
  return function (r2) {
    return r1 !== r2;
  };
};

var eqArrayImpl = function (f) {
  return function (xs) {
    return function (ys) {
      if (xs.length !== ys.length) return false;
      for (var i = 0; i < xs.length; i++) {
        if (!f(xs[i])(ys[i])) return false;
      }
      return true;
    };
  };
};

var foreign$20 = {
  refEq: refEq,
  refIneq: refIneq,
  eqArrayImpl: eqArrayImpl
};

var absurd = function (a) {
    var spin = function ($copy_v) {
        var $tco_result;
        function $tco_loop(v) {
            $copy_v = v;
            return;
        }
        while (!false) {
            $tco_result = $tco_loop($copy_v);
        }
        return $tco_result;
    };
    return spin(a);
};
var showVoid = new Data_Show.Show(absurd);
var Data_Void = {
    absurd: absurd,
    showVoid: showVoid
};

var Eq = function (eq) {
    this.eq = eq;
};
var Eq1 = function (eq1) {
    this.eq1 = eq1;
};
var eqVoid = new Eq(function (v) {
    return function (v1) {
        return true;
    };
});
var eqUnit = new Eq(function (v) {
    return function (v1) {
        return true;
    };
});
var eqString = new Eq(foreign$20.refEq);
var eqNumber = new Eq(foreign$20.refEq);
var eqInt = new Eq(foreign$20.refEq);
var eqChar = new Eq(foreign$20.refEq);
var eqBoolean = new Eq(foreign$20.refEq);
var eq1 = function (dict) {
    return dict.eq1;
};
var eq = function (dict) {
    return dict.eq;
};
var eqArray = function (dictEq) {
    return new Eq(foreign$20.eqArrayImpl(eq(dictEq)));
};
var eq1Array = new Eq1(function (dictEq) {
    return eq(eqArray(dictEq));
});
var notEq = function (dictEq) {
    return function (x) {
        return function (y) {
            return eq(eqBoolean)(eq(dictEq)(x)(y))(false);
        };
    };
};
var notEq1 = function (dictEq1) {
    return function (dictEq) {
        return function (x) {
            return function (y) {
                return eq(eqBoolean)(eq1(dictEq1)(dictEq)(x)(y))(false);
            };
        };
    };
};
var Data_Eq = {
    Eq: Eq,
    Eq1: Eq1,
    eq: eq,
    eq1: eq1,
    notEq: notEq,
    notEq1: notEq1,
    eqBoolean: eqBoolean,
    eqInt: eqInt,
    eqNumber: eqNumber,
    eqChar: eqChar,
    eqString: eqString,
    eqUnit: eqUnit,
    eqVoid: eqVoid,
    eqArray: eqArray,
    eq1Array: eq1Array
};

var unsafeCompareImpl = function (lt) {
  return function (eq) {
    return function (gt) {
      return function (x) {
        return function (y) {
          return x < y ? lt : x === y ? eq : gt;
        };
      };
    };
  };
};

var foreign$22 = {
  unsafeCompareImpl: unsafeCompareImpl
};

var concatString = function (s1) {
  return function (s2) {
    return s1 + s2;
  };
};

var concatArray = function (xs) {
  return function (ys) {
    if (xs.length === 0) return ys;
    if (ys.length === 0) return xs;
    return xs.concat(ys);
  };
};

var foreign$24 = {
  concatString: concatString,
  concatArray: concatArray
};

var Semigroup = function (append) {
    this.append = append;
};
var semigroupVoid = new Semigroup(function (v) {
    return Data_Void.absurd;
});
var semigroupUnit = new Semigroup(function (v) {
    return function (v1) {
        return Data_Unit.unit;
    };
});
var semigroupString = new Semigroup(foreign$24.concatString);
var semigroupArray = new Semigroup(foreign$24.concatArray);
var append = function (dict) {
    return dict.append;
};
var semigroupFn = function (dictSemigroup) {
    return new Semigroup(function (f) {
        return function (g) {
            return function (x) {
                return append(dictSemigroup)(f(x))(g(x));
            };
        };
    });
};
var Data_Semigroup = {
    Semigroup: Semigroup,
    append: append,
    semigroupString: semigroupString,
    semigroupUnit: semigroupUnit,
    semigroupVoid: semigroupVoid,
    semigroupFn: semigroupFn,
    semigroupArray: semigroupArray
};

var LT = function () {
    function LT() {}
    LT.value = new LT();
    return LT;
}();
var GT = function () {
    function GT() {}
    GT.value = new GT();
    return GT;
}();
var EQ = function () {
    function EQ() {}
    EQ.value = new EQ();
    return EQ;
}();
var showOrdering = new Data_Show.Show(function (v) {
    if (v instanceof LT) {
        return "LT";
    }
    if (v instanceof GT) {
        return "GT";
    }
    if (v instanceof EQ) {
        return "EQ";
    }
    throw new Error("Failed pattern match at Data.Ordering line 26, column 1 - line 26, column 39: " + [v.constructor.name]);
});
var semigroupOrdering = new Data_Semigroup.Semigroup(function (v) {
    return function (v1) {
        if (v instanceof LT) {
            return LT.value;
        }
        if (v instanceof GT) {
            return GT.value;
        }
        if (v instanceof EQ) {
            return v1;
        }
        throw new Error("Failed pattern match at Data.Ordering line 21, column 1 - line 21, column 49: " + [v.constructor.name, v1.constructor.name]);
    };
});
var invert = function (v) {
    if (v instanceof GT) {
        return LT.value;
    }
    if (v instanceof EQ) {
        return EQ.value;
    }
    if (v instanceof LT) {
        return GT.value;
    }
    throw new Error("Failed pattern match at Data.Ordering line 33, column 1 - line 33, column 31: " + [v.constructor.name]);
};
var eqOrdering = new Data_Eq.Eq(function (v) {
    return function (v1) {
        if (v instanceof LT && v1 instanceof LT) {
            return true;
        }
        if (v instanceof GT && v1 instanceof GT) {
            return true;
        }
        if (v instanceof EQ && v1 instanceof EQ) {
            return true;
        }
        return false;
    };
});
var Data_Ordering = {
    LT: LT,
    GT: GT,
    EQ: EQ,
    invert: invert,
    eqOrdering: eqOrdering,
    semigroupOrdering: semigroupOrdering,
    showOrdering: showOrdering
};

var unsafeCompare = foreign$22.unsafeCompareImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value);

// Generated by purs version 0.11.6

var main = Control_Monad_Eff_Console.log("Hullo from PureScript, Web!");
var Purs = {
    main: main
};

// import Purs from './Purs.purs' // `rollup-plugin-purs` not yet ready. Lots of errors.

console.log('Hullo from JavaScript, Web!');

Purs.main();

//# sourceMappingURL=index.js.map
